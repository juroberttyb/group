// Code generated by mockery v2.49.0. DO NOT EDIT.

package group

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFunc is an autogenerated mock type for the Func type
type MockFunc[K comparable, T interface{}] struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, key
func (_m *MockFunc[K, T]) Execute(ctx context.Context, key K) (T, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, K) (T, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, K) T); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, K) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockFunc creates a new instance of MockFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFunc[K comparable, T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFunc[K, T] {
	mock := &MockFunc[K, T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
